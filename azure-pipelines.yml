# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
  branches: 
    include:
    - master
  paths:
    exclude:
    - master/EHMessageGenerator
    - master/EHMessageReader


# Set variables 
variables:
  resourceGroupName: 'Mythical-EH-ASA-EH-AF_RG'
  location: 'EastUS'
  ehNamespace: 'mythicalairlineshub'
  ingestionEventhub: 'newmembers'
  egressEventhub: 'newmembersagg'
  egressEHConsumerGroup: 'functrigger'
  partitionCount: 12
  functionApp: 'funcapp'
  funcstore: 'funcappstore'
  funcappinsights: 'funcappappinsights'

pool:
  vmImage: 'ubuntu-latest'

steps:

- task: AzureCLI@2
  inputs:
    azureSubscription: 'JAPADMAN Lab(881ac365-d417-4791-b2a9-48789acbb88d)'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      echo 'hello world'
      echo 'welcome line 2'
      rgExists=$(az group show --name $(resourceGroupName))
      if [ -z "$rgExists" ]
      then
          echo "creating resourcegroup $(resourceGroupName)"
          az group create --name $(resourceGroupName) --location $(location)
      fi
      echo "checking eventhub $(ehNamespace)"
      ehExists=$(az eventhubs namespace show --resource-group $(resourceGroupName) --name $(ehNamespace))

      #EH Namespace and Event Hubs
      if [ -z "$ehExists" ]
      then  
          echo "creating eventhub $(ehNamespace)"
          #Create Event Hub Namespace
          az eventhubs namespace create --name $(ehNamespace) --resource-group $(resourceGroupName)  -l $(location)
          #Create Event Hub
          # Create ingress event hub. Specify a name for the event hub. 
          echo "creating eventhub $(ehNamespace) - $(ingestionEventhub)"
          az eventhubs eventhub create --name $(ingestionEventhub) --resource-group $(resourceGroupName) --namespace-name $(ehNamespace) --partition-count $(partitionCount)

          # Create egress event hub
          echo "creating eventhub $(ehNamespace) - $(egressEventhub)"
          az eventhubs eventhub create --name $(egressEventhub) --resource-group $(resourceGroupName) --namespace-name $(ehNamespace) --partition-count $(partitionCount)
          
          # Create a consumer group for function trigger
          echo "creating consumergroup - egressEHConsumerGroup"
          az eventhubs eventhub consumer-group create --resource-group $(resourceGroupName) --namespace-name $(ehNamespace) --eventhub-name $(egressEventhub) --name egressEHConsumerGroup

          #get the SAS and load it for functions
          echo "creating authorization rule - $(ehNamespace)"
          authorizationRuleName=$(az eventhubs namespace authorization-rule list --namespace-name $(ehNamespace) --resource-group $(resourceGroupName) --query [0].name -o tsv )
          
          primaryConnectionString=$(az eventhubs namespace authorization-rule keys list --name $authorizationRuleName --namespace-name $(ehNamespace) --resource-group $(resourceGroupName) --query primaryConnectionString -o tsv)
                                                          
          #create function plan 
          #az functionapp plan create  \
          #            --resource-group $resourceGroupName \
          #            --name $(functionAppPlan) 
          #            --sku 'consumption' 

          #create function app (CONSUMPTION PLAN)
          az storage account create -n $(funcstore) -l $(location) -g $(resourceGroupName) --sku Standard_LRS
          az resource create -g $(resourceGroupName) -n $(funcappinsights) --resource-type "Microsoft.Insights/components" --properties '{\"Application_Type\":\"web\"}'
          az functionapp create --name $(functionApp) --consumption-plan-location $(location) --os-type Linux  --resource-group $(resourceGroupName)  --runtime java  --storage-account $(funcstore)   
          
      fi


# Build Java Function EHMessageTrigger
- task: Maven@3
  inputs:
    mavenPomFile: 'EHMessageTrigger/pom.xml'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.8'
    mavenVersionOption: 'Default'
    mavenOptions: '-Xmx3072m'
    mavenAuthenticateFeed: false
    effectivePomSkip: false
    sonarQubeRunAnalysis: false
    sqMavenPluginVersionChoice: 'latest'




# ...
# Release Azure Function
- task: CopyFiles@2
  displayName: Copy Files
  inputs:
    SourceFolder: $(system.defaultworkingdirectory)/EHMessageTrigger/target/azure-functions/
    Contents: '**'
    TargetFolder: $(build.artifactstagingdirectory)   


- task: PublishBuildArtifacts@1
  displayName: Publish Artifact
  inputs:
    PathtoPublish: $(build.artifactstagingdirectory)    
